// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.barcodeScanner.validateImages()
    storyboard.barcodeScanner.validateViewControllers()
    storyboard.camera.validateImages()
    storyboard.camera.validateViewControllers()
    storyboard.comments.validateImages()
    storyboard.comments.validateViewControllers()
    storyboard.messages.validateImages()
    storyboard.messages.validateViewControllers()
    storyboard.netPromoter.validateImages()
    storyboard.netPromoter.validateViewControllers()
    storyboard.packingSlip.validateImages()
    storyboard.packingSlip.validateViewControllers()
    storyboard.selfie.validateImages()
    storyboard.selfie.validateViewControllers()
    storyboard.signature.validateImages()
    storyboard.signature.validateViewControllers()
    storyboard.provider.validateImages()
    storyboard.provider.validateViewControllers()
    storyboard.application.validateImages()
    storyboard.application.validateViewControllers()
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
  }
  
  struct image {
    static var appIcon: UIImage? { return UIImage(named: "AppIcon") }
    static var background: UIImage? { return UIImage(named: "background") }
    static var backgroundLg: UIImage? { return UIImage(named: "background-lg") }
    static var barBackground: UIImage? { return UIImage(named: "bar-background") }
    static var circle: UIImage? { return UIImage(named: "circle") }
    static var exitLeft: UIImage? { return UIImage(named: "exit-left") }
    static var exitRight: UIImage? { return UIImage(named: "exit-right") }
    static var forkLeft: UIImage? { return UIImage(named: "fork-left") }
    static var forkRight: UIImage? { return UIImage(named: "fork-right") }
    static var homeLogo: UIImage? { return UIImage(named: "home-logo") }
    static var mapPin: UIImage? { return UIImage(named: "map-pin") }
    static var merge: UIImage? { return UIImage(named: "merge") }
    static var navbarBackground: UIImage? { return UIImage(named: "navbar-background") }
    static var rampLeft: UIImage? { return UIImage(named: "ramp-left") }
    static var rampRight: UIImage? { return UIImage(named: "ramp-right") }
    static var roundaboutLeft: UIImage? { return UIImage(named: "roundabout-left") }
    static var roundaboutRight: UIImage? { return UIImage(named: "roundabout-right") }
    static var route: UIImage? { return UIImage(named: "route") }
    static var scannerOverlay: UIImage? { return UIImage(named: "scanner-overlay") }
    static var stopwatch: UIImage? { return UIImage(named: "stopwatch") }
    static var straight: UIImage? { return UIImage(named: "straight") }
    static var time: UIImage? { return UIImage(named: "time") }
    static var turnLeft: UIImage? { return UIImage(named: "turn-left") }
    static var turnRight: UIImage? { return UIImage(named: "turn-right") }
    static var turnSharpLeft: UIImage? { return UIImage(named: "turn-sharp-left") }
    static var turnSharpRight: UIImage? { return UIImage(named: "turn-sharp-right") }
    static var turnSlightLeft: UIImage? { return UIImage(named: "turn-slight-left") }
    static var turnSlightRight: UIImage? { return UIImage(named: "turn-slight-right") }
    static var uturnLeft: UIImage? { return UIImage(named: "uturn-left") }
    static var uturnRight: UIImage? { return UIImage(named: "uturn-right") }
  }
  
  struct nib {
    static var launchScreen: _R.nib._LaunchScreen { return _R.nib._LaunchScreen() }
  }
  
  struct reuseIdentifier {
    static var commentCollectionViewCellReuseIdentifier: ReuseIdentifier<UIView> { return ReuseIdentifier(identifier: "commentCollectionViewCellReuseIdentifier") }
    static var emailCell: ReuseIdentifier<provide.AuthenticationCell> { return ReuseIdentifier(identifier: "EmailCell") }
    static var historyCell: ReuseIdentifier<UITableViewCell> { return ReuseIdentifier(identifier: "HistoryCell") }
    static var imageCollectionViewCellReuseIdentifier: ReuseIdentifier<provide.ImageCollectionViewCell> { return ReuseIdentifier(identifier: "imageCollectionViewCellReuseIdentifier") }
    static var logoutCell: ReuseIdentifier<UITableViewCell> { return ReuseIdentifier(identifier: "LogoutCell") }
    static var manifestTableViewCell: ReuseIdentifier<provide.RouteManifestItemTableViewCell> { return ReuseIdentifier(identifier: "manifestTableViewCell") }
    static var mediaCollectionViewTableViewCellReuseIdentifier: ReuseIdentifier<UITableViewCell> { return ReuseIdentifier(identifier: "mediaCollectionViewTableViewCellReuseIdentifier") }
    static var nameValueTableViewCellReuseIdentifier: ReuseIdentifier<provide.NameValueTableViewCell> { return ReuseIdentifier(identifier: "nameValueTableViewCellReuseIdentifier") }
    static var packingSlipItemTableViewCell: ReuseIdentifier<provide.PackingSlipItemTableViewCell> { return ReuseIdentifier(identifier: "packingSlipItemTableViewCell") }
    static var passwordCell: ReuseIdentifier<provide.AuthenticationCell> { return ReuseIdentifier(identifier: "PasswordCell") }
    static var routeCell: ReuseIdentifier<UITableViewCell> { return ReuseIdentifier(identifier: "RouteCell") }
    static var routeHistoryCollectionViewCellReuseIdentifier: ReuseIdentifier<provide.RouteHistoryCollectionViewCell> { return ReuseIdentifier(identifier: "routeHistoryCollectionViewCellReuseIdentifier") }
    static var routeManifestTableViewCell: ReuseIdentifier<provide.RouteManifestItemTableViewCell> { return ReuseIdentifier(identifier: "routeManifestTableViewCell") }
    static var termsOfServiceCell: ReuseIdentifier<UITableViewCell> { return ReuseIdentifier(identifier: "TermsOfServiceCell") }
    static var workOrderTableViewCellReuseIdentifier: ReuseIdentifier<provide.WorkOrderTableViewCell> { return ReuseIdentifier(identifier: "workOrderTableViewCellReuseIdentifier") }
  }
  
  struct segue {
    static var applicationViewControllerSegue: String { return "ApplicationViewControllerSegue" }
    static var authenticationViewControllerSegue: String { return "AuthenticationViewControllerSegue" }
    static var authenticationViewControllerUnwindSegue: String { return "AuthenticationViewControllerUnwindSegue" }
    static var directionsViewControllerSegue: String { return "DirectionsViewControllerSegue" }
    static var directionsViewControllerUnwindSegue: String { return "DirectionsViewControllerUnwindSegue" }
    static var manifestViewControllerSegue: String { return "ManifestViewControllerSegue" }
    static var routeHistoryViewControllerSegue: String { return "RouteHistoryViewControllerSegue" }
    static var routeManifestViewControllerSegue: String { return "RouteManifestViewControllerSegue" }
    static var routeManifestViewControllerUnwindSegue: String { return "RouteManifestViewControllerUnwindSegue" }
    static var routeViewControllerSegue: String { return "RouteViewControllerSegue" }
    static var workOrderAnnotationViewControllerSegue: String { return "WorkOrderAnnotationViewControllerSegue" }
    static var workOrderAnnotationViewControllerUnwindSegue: String { return "WorkOrderAnnotationViewControllerUnwindSegue" }
    static var workOrderAnnotationViewTouchedUpInsideSegue: String { return "WorkOrderAnnotationViewTouchedUpInsideSegue" }
    static var workOrderComponentViewControllerSegue: String { return "WorkOrderComponentViewControllerSegue" }
    static var workOrderComponentViewControllerUnwindSegue: String { return "WorkOrderComponentViewControllerUnwindSegue" }
    static var workOrderDestinationConfirmationViewControllerSegue: String { return "WorkOrderDestinationConfirmationViewControllerSegue" }
    static var workOrderDestinationConfirmationViewControllerUnwindSegue: String { return "WorkOrderDestinationConfirmationViewControllerUnwindSegue" }
    static var workOrderDestinationHeaderViewControllerSegue: String { return "WorkOrderDestinationHeaderViewControllerSegue" }
    static var workOrderDestinationHeaderViewControllerUnwindSegue: String { return "WorkOrderDestinationHeaderViewControllerUnwindSegue" }
    static var workOrderDetailsViewControllerSegue: String { return "WorkOrderDetailsViewControllerSegue" }
  }
  
  struct storyboard {
    struct application {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Application", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct barcodeScanner {
      static var initialViewController: provide.BarcodeScannerViewController? { return instance.instantiateInitialViewController() as? provide.BarcodeScannerViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "BarcodeScanner", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct camera {
      static var initialViewController: provide.CameraViewController? { return instance.instantiateInitialViewController() as? provide.CameraViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Camera", bundle: nil) }
      static var selfieViewController: provide.SelfieViewController? { return instance.instantiateViewControllerWithIdentifier("SelfieViewController") as? provide.SelfieViewController }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        assert(selfieViewController != nil, "[R.swift] ViewController with identifier 'selfieViewController' could not be loaded from storyboard 'Camera' as 'provide.SelfieViewController'.")
      }
    }
    
    struct comments {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Comments", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct main {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: nil) }
      static var menuViewController: provide.MenuViewController? { return instance.instantiateViewControllerWithIdentifier("MenuViewController") as? provide.MenuViewController }
      static var webViewController: provide.WebViewController? { return instance.instantiateViewControllerWithIdentifier("WebViewController") as? provide.WebViewController }
      
      static func validateImages() {
        assert(UIImage(named: "home-logo") != nil, "[R.swift] Image named 'home-logo' is used in storyboard 'Main', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(webViewController != nil, "[R.swift] ViewController with identifier 'webViewController' could not be loaded from storyboard 'Main' as 'provide.WebViewController'.")
        assert(menuViewController != nil, "[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'Main' as 'provide.MenuViewController'.")
      }
    }
    
    struct messages {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Messages", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct netPromoter {
      static var initialViewController: provide.NetPromoterViewController? { return instance.instantiateInitialViewController() as? provide.NetPromoterViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "NetPromoter", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct packingSlip {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "PackingSlip", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct provider {
      static var initialViewController: provide.WorkOrdersViewController? { return instance.instantiateInitialViewController() as? provide.WorkOrdersViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Provider", bundle: nil) }
      static var manifestViewController: provide.ManifestViewController? { return instance.instantiateViewControllerWithIdentifier("ManifestViewController") as? provide.ManifestViewController }
      static var workOrderAnnotationViewController: provide.WorkOrderAnnotationViewController? { return instance.instantiateViewControllerWithIdentifier("WorkOrderAnnotationViewController") as? provide.WorkOrderAnnotationViewController }
      static var workOrderDestinationConfirmationViewController: provide.WorkOrderDestinationConfirmationViewController? { return instance.instantiateViewControllerWithIdentifier("WorkOrderDestinationConfirmationViewController") as? provide.WorkOrderDestinationConfirmationViewController }
      static var workOrderDestinationHeaderViewController: provide.WorkOrderDestinationHeaderViewController? { return instance.instantiateViewControllerWithIdentifier("WorkOrderDestinationHeaderViewController") as? provide.WorkOrderDestinationHeaderViewController }
      static var zeroStateViewController: provide.ZeroStateViewController? { return instance.instantiateViewControllerWithIdentifier("ZeroStateViewController") as? provide.ZeroStateViewController }
      
      static func validateImages() {
        assert(UIImage(named: "map-pin") != nil, "[R.swift] Image named 'map-pin' is used in storyboard 'Provider', but couldn't be loaded.")
        assert(UIImage(named: "uturn-left") != nil, "[R.swift] Image named 'uturn-left' is used in storyboard 'Provider', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(workOrderDestinationHeaderViewController != nil, "[R.swift] ViewController with identifier 'workOrderDestinationHeaderViewController' could not be loaded from storyboard 'Provider' as 'provide.WorkOrderDestinationHeaderViewController'.")
        assert(workOrderAnnotationViewController != nil, "[R.swift] ViewController with identifier 'workOrderAnnotationViewController' could not be loaded from storyboard 'Provider' as 'provide.WorkOrderAnnotationViewController'.")
        assert(zeroStateViewController != nil, "[R.swift] ViewController with identifier 'zeroStateViewController' could not be loaded from storyboard 'Provider' as 'provide.ZeroStateViewController'.")
        assert(workOrderDestinationConfirmationViewController != nil, "[R.swift] ViewController with identifier 'workOrderDestinationConfirmationViewController' could not be loaded from storyboard 'Provider' as 'provide.WorkOrderDestinationConfirmationViewController'.")
        assert(manifestViewController != nil, "[R.swift] ViewController with identifier 'manifestViewController' could not be loaded from storyboard 'Provider' as 'provide.ManifestViewController'.")
      }
    }
    
    struct selfie {
      static var initialViewController: provide.SelfieViewController? { return instance.instantiateInitialViewController() as? provide.SelfieViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Selfie", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct signature {
      static var initialViewController: provide.SignatureViewController? { return instance.instantiateInitialViewController() as? provide.SignatureViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Signature", bundle: nil) }
      static var signatureViewController: provide.SignatureViewController? { return instance.instantiateViewControllerWithIdentifier("SignatureViewController") as? provide.SignatureViewController }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        assert(signatureViewController != nil, "[R.swift] ViewController with identifier 'signatureViewController' could not be loaded from storyboard 'Signature' as 'provide.SignatureViewController'.")
      }
    }
  }
}

struct _R {
  struct nib {
    struct _LaunchScreen: NibResource {
      var instance: UINib { return UINib.init(nibName: "LaunchScreen", bundle: nil) }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

protocol NibResource {
  var instance: UINib { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.map(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.map(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.map { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}